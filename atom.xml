<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>曹操写码</title>
  
  <subtitle>test</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-12T07:00:15.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>曹操吃瓜（melon cao)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一万里路-DNS.md</title>
    <link href="http://yoursite.com/2019/04/12/%E4%B8%80%E4%B8%87%E9%87%8C%E8%B7%AF-DNS/"/>
    <id>http://yoursite.com/2019/04/12/一万里路-DNS/</id>
    <published>2019-04-12T07:00:00.000Z</published>
    <updated>2019-04-12T07:00:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>DNS (Domain Name System)， 也叫网域名称系统，是互联网的一项服务。它实质上是一个 域名 和 IP 相互映射的分布式数据库，有了它，我们就可以通过域名更方便的访问互联网。DNS使用TCP和UDP端口53。</p></blockquote><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>DNS采用分布式的数据库结构</p><p><img src="https://user-gold-cdn.xitu.io/2017/9/23/3a7b7303790037d1379d2ac829127aa0" alt="image"></p><p>. =&gt; 根域名，<br>com =&gt; 顶级域名<br>chinaz =&gt; 二级域名<br>www =&gt; 三级域名</p><p><strong>根DNS服务器：返回顶级域DNS服务器的IP地址</strong></p><p>当我们访问<a href="https://www.caocaochigua.cn/" target="_blank" rel="noopener">www.caocaochigua.cn</a>的时候,如果本地dns服务器没有记录，那么它就会向根服务器去请求地址。,如果本地dns服务器没有记录，那么它就会向根服务器去请求地址。</p><p>目前全球有13个根域名解析服务器，这13条记录持久化在递归解析服务器中。DNS 协议使用了UDP查询，由于UDP查询中能保证性能的最大长度是512字节，要让所有根域名服务器数据能包含在512字节的UDP包中， 根服务器只能限制在13个。</p><p><strong>顶级域DNS服务器：返回权威DNS服务器IP地址</strong><br>.cn .com 等所在的位置就是顶级域<br>顶级域名服务器主要负责管理在该顶级域名服务器注册的二级域名。像com这样的顶级域名，由ICANN 严格控制，是不允许随便创建的。</p><p><strong>权威DNS服务器：返回主机IP地址</strong><br>权威DNS服务器是经过上一级授权，对域名进行解析的服务器，同时它可以把解析授权转授给其他人。</p><h3 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程"></a>解析过程</h3><p>在实际上网中，我们不是直接连接根服务器，而是通过本地DNS服务器上网。我们通过浏览器或者应用程序访问互联网时，都会先执行一遍DNS解析流程。</p><p>当一个主机发出DNS查询请求时，这个查询请求报文就发送给本地域名服务器，本地服务器替我们进行DNS解析,我们得到的ip地址是由本地服务器返回的。</p><p><img src="https://user-gold-cdn.xitu.io/2017/9/23/5916fc89a789d7fc3ff24b981e7fe91d" alt="image"></p><p>在客户端的解析流程中，默认是先查找hosts文件，如果没有匹配到，再进行DNS解析。第四步请求本地DNS服务器去执行resolving，它会根据本地DNS服务器配置，发送解析请求到本地服务器（递归解析服务器）。</p><p>如果主机所询问的本地服务器不知道被查询的域名的IP地址，那么本地服务器就以DNS客户的身份，向其它根域名服务器继续发出查询请求报文(即替主机继续查询)，而不是让主机自己进行下一步查询。因此，递归查询返回的查询结果或者是所要查询的IP地址，或者是报错，表示无法查询到所需的IP地址。</p><p><img src="https://user-gold-cdn.xitu.io/2017/9/23/d30ca05abf14b4f94dfef920e91af412" alt="image"></p><p>递归解析服务器通过请求一级一级的权威域名服务器，获得下一目标的地址，直到找到目标域名的权威域名服务器。<br>DNS访问量在实际操作中是很大的，所以会实现一定的缓存。递归查询过的域名不会的再走一遍流程，而是把上一次的解析结果的结果直接返回。</p><h3 id="解析记录"><a href="#解析记录" class="headerlink" title="解析记录"></a>解析记录</h3><p><strong>A和AAAA记录</strong>：映射一个host到一个IP地址。A记录是被用来应一个host到一个IPv4的IP地址，而AAAAA记录则是用来映射一个host到一个IPv6的地址。</p><p><strong>CNAME记录</strong>：记录定义了一个给定的服务（一个通过A记录或者AAAA记录定义的）名字的别名。</p><p><strong>NS记录</strong>：解析服务器记录。用来表明由哪台服务器对该域名进行解析，这里的NS记录只对子域名生效。<br>优先级：NS记录优先于A记录。即，如果一个主机地址同时存在NS记录和A记录，则A记录不生效。这里的NS记录只对子域名生效。</p><p><strong>MX记录</strong>：用来定义域名邮件交换。这可以帮助邮件消息正确到达邮件服务器。</p><p><strong>PTR记录</strong>：定义一个名字和一个IP地址的关联。PTR记录是A和AAAA记录的反操作。</p><p><strong>CAA记录</strong>：指定允许CA（证书颁发机构）为你的域名颁发SSL/TLS证书。</p><hr><p>参考文献<br><a href="https://juejin.im/post/59c6201df265da064428b835" target="_blank" rel="noopener">https://juejin.im/post/59c6201df265da064428b835</a><br><a href="http://www.sunhao.win/articles/netwrok-dns.html" target="_blank" rel="noopener">http://www.sunhao.win/articles/netwrok-dns.html</a></p><p>这篇文章主要总结于部门分享，参考了以上网络上的参考文献。如有遗漏，请及时与我本人沟通 <a href="mailto:caocaochigua@outlook.com" target="_blank" rel="noopener">caocaochigua@outlook.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;DNS (Domain Name System)， 也叫网域名称系统，是互联网的一项服务。它实质上是一个 域名 和
      
    
    </summary>
    
      <category term="计算机网络基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="DNS" scheme="http://yoursite.com/tags/DNS/"/>
    
      <category term="域名" scheme="http://yoursite.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>一万里路-IP.md</title>
    <link href="http://yoursite.com/2019/04/03/%E4%B8%80%E4%B8%87%E9%87%8C%E8%B7%AF-IP/"/>
    <id>http://yoursite.com/2019/04/03/一万里路-IP/</id>
    <published>2019-04-03T09:11:27.000Z</published>
    <updated>2019-04-12T06:50:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>互联网解决的是设备之间的连接问题，目标是让设备 A 的信息能准确的送达设备 B。为了实现这个目标，我们需要先了解互联网的结构。Internet其实是由无数个子网所构成，是一个二级的结构，第一级是子网，第二级才是子网中的设备（个体）。</p><h3 id="1-什么是IP地址"><a href="#1-什么是IP地址" class="headerlink" title="1 什么是IP地址"></a>1 什么是IP地址<br></h3><p>一种全世界都认同的表示格式,例: 192.168.6.6<br><br>分4段，每一段8bit，总共32bit</p><blockquote><p>IP 地址 = 网络号(寻找子网） + 主机号（寻找个体）<br></p></blockquote><h3 id="2-常见的IP地址类型"><a href="#2-常见的IP地址类型" class="headerlink" title="2 常见的IP地址类型"></a>2 常见的IP地址类型<br></h3><p>A类：10.X.X.X<br><br>B类：172.16.X.X<br><br>C类：192.168.X.X<br></p><h4 id="2-1-如何确定一个-IP-地址是属于-A-B-C-的哪一类呢"><a href="#2-1-如何确定一个-IP-地址是属于-A-B-C-的哪一类呢" class="headerlink" title="2.1 如何确定一个 IP 地址是属于 A B C 的哪一类呢"></a>2.1 如何确定一个 IP 地址是属于 A B C 的哪一类呢</h4><h5 id="子网掩码（subnet-mask）"><a href="#子网掩码（subnet-mask）" class="headerlink" title="子网掩码（subnet mask）"></a>子网掩码（subnet mask）</h5><p>子网掩码是用于区分 网络地址（Network ID） 和 主机地址 （Host ID）的。IP地址转化为二进制，4个字节对应不同的地址。</p><p>A类地址：第一个字节为 Network ID（起始比特位为 0）剩下三个字节为 Host ID。【1 - 126】</p><p>B类地址：（起始比特位为 10）第二个字节为 Network ID，剩下两个字节为 Host ID。【128 - 191】</p><p>C类地址：（第一个字节的起始比特位为 110），第三个字节为 Network ID，剩下一个字节为 Host ID【192 - 223】</p><p>这种切割方式十分暴力，存在地址浪费。现如今Internet路由所使用的切割方式是CIDR。</p><h5 id="CIDR-无类型域间选路"><a href="#CIDR-无类型域间选路" class="headerlink" title="CIDR 无类型域间选路"></a>CIDR 无类型域间选路</h5><p>172.31.202.28/23</p><p>CIDR 以分类（class）来切割 IP 地址<br>／23代表 CIDR notation，用来描述IP地址如何切割。它表示 IP 地址的前 23 bits 为 Network ID，剩余的 9 bits 为 Host ID。它以更小粒度来切分，方便路由器能识别出正确的IP地址的结构。</p><h3 id="3-IP地址怎么配"><a href="#3-IP地址怎么配" class="headerlink" title="3 IP地址怎么配"></a>3 IP地址怎么配</h3><h4 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h4><blockquote><p>动态主机配置协议(DHCP)是一个应用层协议，也就是位于TCP/IP 5层协议模型的第5层，同时它也是一个客户机-服务器协议。</p></blockquote><p>配置过程：</p><p>1.发现阶段 <br><br>新主机广播 DHCP Discover包：我是新来的，我还没有IP <br></p><p>2.提供阶段 <br><br>DHCP Server广播 DHCP Offer包：我给你个IP，你看咋样 <br></p><p>3.请求阶段 <br><br>新主机广播 DHCP Request包：我希望使用XX服务器给我的IP<br></p><p>4.批准通告 <br><br>DHCP Server广播 DHCP ACK包：这个新人租了我的IP，租期是xxx <br><br>or NAK包：我无法分配此IP，你重来吧</p><h3 id="4-IP地址怎么映射到MAC地址"><a href="#4-IP地址怎么映射到MAC地址" class="headerlink" title="4 IP地址怎么映射到MAC地址"></a>4 IP地址怎么映射到MAC地址</h3><h4 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h4><blockquote><p>地址解析协议，是通过解析网络层地址（ipv4, ipv6）来寻找数据链路层地址的一个在网络协议包中非常重要的网络传输协议。ARP属于数据链路层协议。</p></blockquote><h4 id="ARP是如何工作的"><a href="#ARP是如何工作的" class="headerlink" title="ARP是如何工作的"></a>ARP是如何工作的</h4><p>1.当发送数据时，主机A会在自己的ARP缓存表中寻找是否有目标IP地址。如果找到就知道目标MAC地址为（00-BB-00-62-C2-02），直接把目标MAC地址写入帧里面发送就可。<br></p><p>2.如果在ARP缓存表中没有找到相对应的IP地址<br>判断自身IP和目标IP是否为同一个网段，是的话，主机A就会在网络上发送一个广播（ARP request），目标MAC地址是“FF.FF.FF.FF.FF.FF”，这表示向同一网段内的所有主机发出这样的询问：“192.168.38.11的MAC地址是什么？”<br></p><p>3.网络上其他主机并不响应ARP询问，只有主机B接收到这个帧时，才向主机A做出这样的回应（ARP response）：“192.168.38.11的MAC地址是00-BB-00-62-C2-02”，此回应以单播方式。这样，主机A就知道主机B的MAC地址，它就可以向主机B发送信息。同时它还更新自己的ARP高速缓存（ARP cache），下次再向主机B发送信息时，直接从ARP缓存表里查找就可。<br></p><p>4.不是同一网段，通过默认网关的IP地址获取默认网关的MAC</p><p>ARP缓存表在一段时间内如果表中的某一行没有使用，就会被删除，这样可以大大减少ARP缓存表的长度，加快查询速度。</p><h3 id="5-常见的地址查询命令"><a href="#5-常见的地址查询命令" class="headerlink" title="5 常见的地址查询命令"></a>5 常见的地址查询命令</h3><p>ipconfig<br>ip address<br>ping<br>traceroute<br>wget</p><hr><p>参考文献<br><a href="https://juejin.im/post/5a37699ff265da430c11e9e5" target="_blank" rel="noopener">https://juejin.im/post/5a37699ff265da430c11e9e5</a><br><a href="https://juejin.im/post/5a44f5e86fb9a045211f040b" target="_blank" rel="noopener">https://juejin.im/post/5a44f5e86fb9a045211f040b</a><br><a href="https://juejin.im/post/59f1e319f265da430405db4a" target="_blank" rel="noopener">https://juejin.im/post/59f1e319f265da430405db4a</a><br><a href="https://juejin.im/entry/58d8a22844d90400687a99da" target="_blank" rel="noopener">https://juejin.im/entry/58d8a22844d90400687a99da</a></p><p>这篇文章主要总结于部门分享，参考了以上网络上的参考文献。如有遗漏，请及时与我本人沟通 <a href="mailto:caocaochigua@outlook.com" target="_blank" rel="noopener">caocaochigua@outlook.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;互联网解决的是设备之间的连接问题，目标是让设备 A 的信息能准确的送达设备 B。为了实现这个目标，我们需要先了解互联网的结构。Internet其实是由无数个子网所构成，是一个二级的结构，第一级是子网，第二级才是子网中的设备（个体）。&lt;/p&gt;
&lt;h3 id=&quot;1-什么是IP地
      
    
    </summary>
    
      <category term="计算机网络基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="IP" scheme="http://yoursite.com/tags/IP/"/>
    
      <category term="ARP" scheme="http://yoursite.com/tags/ARP/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化（一）- DOM</title>
    <link href="http://yoursite.com/2019/03/20/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89-DOM/"/>
    <id>http://yoursite.com/2019/03/20/前端性能优化（一）-DOM/</id>
    <published>2019-03-20T07:22:27.000Z</published>
    <updated>2019-04-03T09:16:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>简单来说，渲染引擎根据 HTML 文件描述构建相应的模型，调用浏览器各个零部件，从而将网页资源代码转换为图像结果，这个过程就是渲染过程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[HTML/CSS/JS资源] --&gt; B[浏览器内核]</span><br><span class="line">B[浏览器内核] --&gt; C[图像]</span><br></pre></td></tr></table></figure></p><ol><li><p>根据 HTML 构建 DOM 树（HTML 解释器），有 CSS 的话会去 构建 CSSOM 树（CSS 解释器）。如果遇到 script 标签的话，会判断是否存在 async 或者 defer ，前者会并行进行下载并执行 JS(JS引擎)后者会先下载文件，然后等待 HTML 解析完成后顺序执行。</p></li><li><p>如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP/2协议的话会极大的提高多图的下载效率。</p></li><li><p>CSSOM 树和 DOM 树构建完成后会开始 生成 Render 树（图层布局计算模块），这一步就是确定页面元素的布局、样式等等诸多方面的东西</p></li><li><p>在生成 Render 树的过程中浏览器就开始 调用 GPU 绘制，合成图层，将内容显示在屏幕上了。</p></li></ol><h1 id="why-DOM-慢"><a href="#why-DOM-慢" class="headerlink" title="why DOM 慢"></a>why DOM 慢</h1><h3 id="1-渲染的慢"><a href="#1-渲染的慢" class="headerlink" title="1.渲染的慢"></a>1.渲染的慢</h3><ul><li>JS本身并不慢 <br></li><li>JS修改DOM也不慢</li><li>慢是因为要交过路费</li></ul><blockquote><p>把 DOM 和 JavaScript 各自想象成一个岛屿，它们之间用收费桥梁连接。——《高性能 JavaScript》</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[JS引擎] --&gt; |桥接接口| D[渲染引擎]</span><br></pre></td></tr></table></figure><p>JS 引擎和渲染引擎是独立实现的。JS每操作一次DOM，都相当于过一次桥。过桥的次数一多，就会产生比较明显的性能问题。因此我们要减少 DOM 操作。</p><h3 id="2-操作的慢"><a href="#2-操作的慢" class="headerlink" title="2.操作的慢"></a>2.操作的慢</h3><p>CSSOM与DOM结合以后，我们就得到了Render tree。</p><p>我们对 DOM 的操作不仅局限于访问，还有修改它。当我们对 DOM 的修改会引发它外观（样式）上的改变时，就会产生==回流==或==重绘==。</p><p>这个过程，实际上就是触发了Render tree的变化所导致的。</p><ul><li>回流：当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影响），然后再将计算的结果绘制出来。这个过程就是回流（也叫重排）。</li><li>重绘：当我们对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式，这个过程叫做重绘。</li></ul><p><strong>重绘不一定导致回流，回流一定会导致重绘</strong>。</p><h1 id="how-DOM-快"><a href="#how-DOM-快" class="headerlink" title="how DOM 快"></a>how DOM 快</h1><h3 id="1-少交过路费"><a href="#1-少交过路费" class="headerlink" title="1.少交过路费"></a>1.少交过路费</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;DOM操作测试&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>需求：往 container 元素里写 10000 句一样的话。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(let count=0;count&lt;10000;count++)&#123; </span><br><span class="line">  document.getElementById(&apos;container&apos;).innerHTML+=&apos;&lt;span&gt;我是一个小测试&lt;/span&gt;&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们每一次循环都调用 DOM 接口重新获取了一次 container 元素，相当于每次循环都交了一次过路费。前后交了 10000 次过路费，但其中 9999 次过路费都可以用缓存变量的方式节省下来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 只获取一次container</span><br><span class="line">let container = document.getElementById(&apos;container&apos;)</span><br><span class="line">for(let count=0;count&lt;10000;count++)&#123; </span><br><span class="line">  container.innerHTML += &apos;&lt;span&gt;我是一个小测试&lt;/span&gt;&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-避免不必要的DOM更改"><a href="#2-避免不必要的DOM更改" class="headerlink" title="2.避免不必要的DOM更改"></a>2.避免不必要的DOM更改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let container = document.getElementById(&apos;container&apos;)</span><br><span class="line">let content = &apos;&apos;</span><br><span class="line">for(let count=0;count&lt;10000;count++)&#123; </span><br><span class="line">  // 先对内容进行操作</span><br><span class="line">  content += &apos;&lt;span&gt;我是一个小测试&lt;/span&gt;&apos;</span><br><span class="line">&#125; </span><br><span class="line">// 内容处理好了,最后再触发DOM的更改</span><br><span class="line">container.innerHTML = content</span><br></pre></td></tr></table></figure><p><strong>JS 层面的事情，JS 自己去处理，处理好了，再来找 DOM 打报告。</strong></p><h4 id="DOM-Fragment-文档片段节点"><a href="#DOM-Fragment-文档片段节点" class="headerlink" title="DOM Fragment 文档片段节点"></a>DOM Fragment 文档片段节点</h4><blockquote><p>DocumentFragment接口表示一个没有父级文件的最小文档对象。它被当做一个轻量版的Document使用，用于存储已排好版的或尚未打理好格式XML片段。最大的区别是因为DocumentFragment不是真实DOM树的一部分，它的变化不会引起DOM树的重新渲染的操作(reflow)，且不会导致性能等问题。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let container = document.getElementById(&apos;container&apos;)</span><br><span class="line">// 创建一个DOM Fragment对象作为容器</span><br><span class="line">let content = document.createDocumentFragment()</span><br><span class="line">for(let count=0;count&lt;10000;count++)&#123;</span><br><span class="line">  // span此时可以通过DOM API去创建</span><br><span class="line">  let oSpan = document.createElement(&quot;span&quot;)</span><br><span class="line">  oSpan.innerHTML = &apos;我是一个小测试&apos;</span><br><span class="line">  // 像操作真实DOM一样操作DOM Fragment对象</span><br><span class="line">  content.appendChild(oSpan)</span><br><span class="line">&#125;</span><br><span class="line">// 内容处理好了,最后再触发真实DOM的更改</span><br><span class="line">container.appendChild(content)</span><br></pre></td></tr></table></figure><p>这样一来，需要计算的属性相对原生而言会少很多，这样效率就很快，每次操作之后先修改虚拟dom结构，通过对比之前的状态，计算出最小的dom修改步骤，再通知真实DOM做最小的修改。交出节点后，完成了作为一个容器的使命。这种结构化、干净利落的特性，使得 DOM Fragment 作为经典的性能优化手段大受欢迎，这一点在 很多前端框架的源码中均有体现。</p><hr><p>参考文献<br><a href="https://juejin.im/book/5b936540f265da0a9624b04b" target="_blank" rel="noopener">https://juejin.im/book/5b936540f265da0a9624b04b</a><br>如有遗漏，请及时与我本人沟通 <a href="mailto:caocaochigua@outlook.com" target="_blank" rel="noopener">caocaochigua@outlook.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;简单来说，渲染引擎根据 HTML 文件描述构建相应的模型，调用浏览器各个零部件，从而将网页资源代码转换为图像结果，这个过程就是渲染过程&lt;br
      
    
    </summary>
    
      <category term="性能优化" scheme="http://yoursite.com/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="dom" scheme="http://yoursite.com/tags/dom/"/>
    
      <category term="render" scheme="http://yoursite.com/tags/render/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化(二）- 图片</title>
    <link href="http://yoursite.com/2019/03/20/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2019/03/20/前端性能优化（二）-图片/</id>
    <published>2019-03-20T07:22:27.000Z</published>
    <updated>2019-04-03T09:16:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h1><p>过去，我们最熟悉的图片优化方式是压缩图片本身。目前我们平台的测试要求是&lt;=300k／每张图，压缩图片体积很重要，但是以牺牲图片质量为代价的。9012年，我们要尽可能的寻求==质量==与==性能==之间的平衡。</p><h3 id="二进制位数与色彩的关系"><a href="#二进制位数与色彩的关系" class="headerlink" title="二进制位数与色彩的关系"></a>二进制位数与色彩的关系</h3><p>在计算机中，像素用二进制数来表示。不同的图片格式中像素与二进制位数之间的对应关系是不同的。一个像素对应的二进制位数越多，它可以表示的颜色种类就越多，成像效果也就越细腻，文件体积相应也会越大。</p><p>一个二进制位表示两种颜色（0|1 对应黑|白），如果一种图片格式对应的二进制位数有 n 个，那么它就可以呈现 2^n 种颜色。</p><p><img src="https://img3.mukewang.com/szimg/5b56952600014eb005400300.jpg" alt="image"><br><img src="https://cdn.aidaxue.com/15329996928301337.jpg" alt="image"></p><table><thead><tr><th>课程封面</th><th>风格</th><th>体积</th><th>时间(Content Download)</th></tr></thead><tbody><tr><td>慕课网</td><td>扁平</td><td>22.2kb</td><td>40.8ms </td></tr><tr><td>AI大学</td><td>写实</td><td>39.4kb</td><td>119.97ms </td></tr></tbody></table><h3 id="PEG-JPG"><a href="#PEG-JPG" class="headerlink" title="PEG/JPG"></a>PEG/JPG</h3><p>关键字：有损压缩、体积小、加载快、不支持透明</p><p>使用场景:<br>JPG 适用于呈现色彩丰富的图片，在我们日常开发中，JPG 图片经常作为大的背景图、轮播图或 Banner 图出现。(tb,jd index)</p><h3 id="PNG-8-与-PNG-24"><a href="#PNG-8-与-PNG-24" class="headerlink" title="PNG-8 与 PNG-24"></a>PNG-8 与 PNG-24</h3><p>关键字：无损压缩、质量高、体积大、支持透明</p><p>使用场景:考虑到 PNG 在处理线条和颜色对比度方面的优势，我们主要用它来呈现小的 Logo、颜色简单且对比强烈的图片或背景等。</p><h3 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h3><p>关键字：文本文件、体积小、不失真、兼容性好</p><p>使用场景:SVG是文本文件，我们既可以像写代码一样定义 SVG，把它写在 HTML 里、成为 DOM 的一部分，也可以把对图形的描述写入以 .svg 为后缀的独立文件。</p><h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><p>关键字：文本文件、依赖编码、小图标解决方案</p><p>使用场景:在传输非常小的图片的时候，Base64 带来的文件体积膨胀、以及浏览器解析 Base64 的时间开销，与它节省掉的 HTTP 请求开销相比，可以忽略不计，这时候才能真正体现出它在性能方面的优势。</p><p>这里最推荐的是利用 webpack 来进行 Base64 的编码——webpack 的 url-loader除了具备基本的 Base64 转码能力，还可以结合文件大小，帮我们判断图片是否有必要进行 Base64 编码。</p><h3 id="WebP"><a href="#WebP" class="headerlink" title="WebP"></a>WebP</h3><p>关键字：年轻的全能型选手,兼容性差</p><blockquote><p>与 PNG 相比，WebP 无损图像的尺寸缩小了 26％。在等效的 SSIM 质量指数下，WebP 有损图像比同类 JPEG 图像小 25-34％。 无损 WebP 支持透明度（也称为 alpha 通道），仅需 22％ 的额外字节。对于有损 RGB 压缩可接受的情况，有损 WebP 也支持透明度，与 PNG 相比，通常提供 3 倍的文件大小。</p></blockquote><p>兼容性处理方案</p><p>PLAN A</p><p>..//img.xxx.jpg_.webp</p><p>根据浏览器的型号、以及该型号是否支持 WebP 这些信息来决定当前浏览器显示的是 .webp 后缀还是 .jpg 后缀</p><p>PLAN B</p><p>由服务器根据 HTTP 请求头部的 Accept 字段来决定返回什么格式的图片。当 Accept 字段包含 image/webp 时，就返回 WebP 格式的图片，否则返回原图。</p><p>这种做法的好处是，当浏览器对 WebP 格式图片的兼容支持发生改变时，我们也不用再去更新自己的兼容判定代码，只需要服务端像往常一样对 Accept 字段进行检查即可。</p><h3 id="Lazy-Load"><a href="#Lazy-Load" class="headerlink" title="Lazy-Load"></a>Lazy-Load</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 获取所有的图片标签</span><br><span class="line">    const imgs = document.getElementsByTagName(&apos;img&apos;)</span><br><span class="line">    // 获取可视区域的高度</span><br><span class="line">    const viewHeight = window.innerHeight || document.documentElement.clientHeight</span><br><span class="line">    // num用于统计当前显示到了哪一张图片，避免每次都从第一张图片开始检查是否露出</span><br><span class="line">    let num = 0</span><br><span class="line">    function lazyload()&#123;</span><br><span class="line">        for(let i=num; i&lt;imgs.length; i++) &#123;</span><br><span class="line">            // 用可视区域高度减去元素顶部距离可视区域顶部的高度</span><br><span class="line">            let distance = viewHeight - imgs[i].getBoundingClientRect().top</span><br><span class="line">            // 如果可视区域高度大于等于元素顶部距离可视区域顶部的高度，说明元素露出</span><br><span class="line">            if(distance &gt;= 0 )&#123;</span><br><span class="line">                // 给元素写入真实的src，展示图片</span><br><span class="line">                imgs[i].src = imgs[i].getAttribute(&apos;data-src&apos;)</span><br><span class="line">                // 前i张图片已经加载完毕，下次从第i+1张开始检查是否露出</span><br><span class="line">                num = i + 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 监听Scroll事件</span><br><span class="line">    window.addEventListener(&apos;scroll&apos;, lazyload, false);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="事件的节流（throttle）与防抖（debounce）"><a href="#事件的节流（throttle）与防抖（debounce）" class="headerlink" title="事件的节流（throttle）与防抖（debounce）"></a>事件的节流（throttle）与防抖（debounce）</h1><p>这两个东西都以闭包的形式存在。</p><p>它们通过对事件对应的回调函数进行包裹、以自由变量的形式缓存时间信息，最后用 setTimeout 来控制事件的触发频率。</p><p>机场大巴的故事</p><h3 id="节流（throttle"><a href="#节流（throttle" class="headerlink" title="节流（throttle)"></a>节流（throttle)</h3><p>司机只等十分钟<br>乘客只有一辆大巴</p><p>throttle 的中心思想在于：在某段时间内，不管你触发了多少次回调，我都只认第一次，并在计时结束时给予响应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// fn是我们需要包装的事件回调, interval是时间间隔的阈值</span><br><span class="line">function throttle(fn, interval) &#123;</span><br><span class="line">  // last为上一次触发回调的时间</span><br><span class="line">  let last = 0</span><br><span class="line">  </span><br><span class="line">  // 将throttle处理结果当作函数返回</span><br><span class="line">  return function () &#123;</span><br><span class="line">      // 保留调用时的this上下文</span><br><span class="line">      let context = this</span><br><span class="line">      // 保留调用时传入的参数</span><br><span class="line">      let args = arguments</span><br><span class="line">      // 记录本次触发回调的时间</span><br><span class="line">      let now = +new Date()</span><br><span class="line">      </span><br><span class="line">      // 判断上次触发的时间和本次触发的时间差是否小于时间间隔的阈值</span><br><span class="line">      if (now - last &gt;= interval) &#123;</span><br><span class="line">      // 如果时间间隔大于我们设定的时间间隔阈值，则执行回调</span><br><span class="line">          last = now;</span><br><span class="line">          fn.apply(context, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 用throttle来包装scroll的回调</span><br><span class="line">const better_scroll = throttle(() =&gt; console.log(&apos;触发了滚动事件&apos;), 1000)</span><br><span class="line"></span><br><span class="line">document.addEventListener(&apos;scroll&apos;, better_scroll)</span><br></pre></td></tr></table></figure><h3 id="防抖（Debounce）"><a href="#防抖（Debounce）" class="headerlink" title="防抖（Debounce）"></a>防抖（Debounce）</h3><p>司机每上一个乘客 多等十分钟</p><p>防抖的中心思想在于：我会等你到底。在某段时间内，不管你触发了多少次回调，我都只认最后一次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// fn是我们需要包装的事件回调, delay是每次推迟执行的等待时间</span><br><span class="line">function debounce(fn, delay) &#123;</span><br><span class="line">  // 定时器</span><br><span class="line">  let timer = null</span><br><span class="line">  </span><br><span class="line">  // 将debounce处理结果当作函数返回</span><br><span class="line">  return function () &#123;</span><br><span class="line">    // 保留调用时的this上下文</span><br><span class="line">    let context = this</span><br><span class="line">    // 保留调用时传入的参数</span><br><span class="line">    let args = arguments</span><br><span class="line"></span><br><span class="line">    // 每次事件被触发时，都去清除之前的旧定时器</span><br><span class="line">    if(timer) &#123;</span><br><span class="line">        clearTimeout(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    // 设立新定时器</span><br><span class="line">    timer = setTimeout(function () &#123;</span><br><span class="line">      fn.apply(context, args)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 用debounce来包装scroll的回调</span><br><span class="line">const better_scroll = debounce(() =&gt; console.log(&apos;触发了滚动事件&apos;), 1000)</span><br><span class="line"></span><br><span class="line">document.addEventListener(&apos;scroll&apos;, better_scroll)</span><br></pre></td></tr></table></figure><hr><p>参考文献<br><a href="https://juejin.im/book/5b936540f265da0a9624b04b" target="_blank" rel="noopener">https://juejin.im/book/5b936540f265da0a9624b04b</a><br>如有遗漏，请及时与我本人沟通 <a href="mailto:caocaochigua@outlook.com" target="_blank" rel="noopener">caocaochigua@outlook.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;图片优化&quot;&gt;&lt;a href=&quot;#图片优化&quot; class=&quot;headerlink&quot; title=&quot;图片优化&quot;&gt;&lt;/a&gt;图片优化&lt;/h1&gt;&lt;p&gt;过去，我们最熟悉的图片优化方式是压缩图片本身。目前我们平台的测试要求是&amp;lt;=300k／每张图，压缩图片体积很重要，但是以
      
    
    </summary>
    
      <category term="性能优化" scheme="http://yoursite.com/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="svg" scheme="http://yoursite.com/tags/svg/"/>
    
      <category term="img" scheme="http://yoursite.com/tags/img/"/>
    
  </entry>
  
</feed>
